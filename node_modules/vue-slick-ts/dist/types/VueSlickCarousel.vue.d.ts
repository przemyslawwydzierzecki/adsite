/// <reference types="jquery" />
/// <reference types="jquery" />
import "slick-carousel";
import { SlickInstance, SlickBreakpoint, SlickDirection } from './carousel.types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    readonly accessibility: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly adaptiveHeight: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly autoplay: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly autoplaySpeed: {
        readonly type: import("vue").PropType<number>;
        readonly default: 3000;
    };
    readonly arrows: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly asNavFor: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: null;
    };
    readonly prevArrow: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: "<button type=\"button\" class=\"slick-prev\">Previous</button>";
    };
    readonly nextArrow: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: "<button type=\"button\" class=\"slick-next\">Next</button>";
    };
    readonly centerMode: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly centerPadding: {
        readonly type: import("vue").PropType<string>;
        readonly default: "50px";
        readonly validator: (val: string) => boolean;
    };
    readonly cssEase: {
        readonly type: import("vue").PropType<string>;
        readonly default: "ease";
    };
    readonly customPaging: {
        readonly type: import("vue").PropType<(slider: any, i: number) => string>;
        readonly default: () => undefined;
    };
    readonly dots: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly dotsClass: {
        readonly type: import("vue").PropType<string>;
        readonly default: "slick-dots";
    };
    readonly draggable: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly fade: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly focusOnSelect: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly easing: {
        readonly type: import("vue").PropType<string>;
        readonly default: "linear";
    };
    readonly edgeFriction: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0.15;
    };
    readonly infinite: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly initialSlide: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0;
    };
    readonly lazyLoad: {
        readonly type: import("vue").PropType<string>;
        readonly default: "ondemand";
        readonly validator: (val: string) => boolean;
    };
    readonly mobileFirst: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly pauseOnFocus: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly pauseOnHover: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly pauseOnDotsHover: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly respondTo: {
        readonly type: import("vue").PropType<string>;
        readonly default: "window";
        readonly validator: (val: string) => boolean;
    };
    readonly responsive: {
        readonly type: import("vue").PropType<object>;
        readonly default: null;
    };
    readonly rows: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slide: {
        readonly type: import("vue").PropType<string | JQuery<HTMLElement>>;
        readonly default: "";
    };
    readonly slidesPerRow: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slidesToShow: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slidesToScroll: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly speed: {
        readonly type: import("vue").PropType<number>;
        readonly default: 300;
    };
    readonly swipe: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly swipeToSlide: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly touchMove: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly touchThreshold: {
        readonly type: import("vue").PropType<number>;
        readonly default: 5;
    };
    readonly useCSS: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly useTransform: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly variableWidth: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly vertical: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly verticalSwiping: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly rtl: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly waitForAnimate: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1000;
    };
}, {
    slickCurrentSlide(): number;
    slickNext(): void;
    slickPrev(): void;
    slickPause(): void;
    slickPlay(): void;
    getSlick(): SlickInstance;
    unslick(fromBreakpoint: number): void;
    slickGoTo(slideNumber: number, dontAnimate: boolean): void;
    slickAdd(html: string, index: number | boolean, addBefore: boolean): void;
    slickRemove(index: number | boolean, removeBefore: boolean, removeAll: boolean): void;
    slickFilter(filter: string): void;
    slickUnfilter(index: number): void;
    slickGetOption(option: string): void;
    slickSetOption(option: string, value: string, refresh: boolean): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    init: (event: JQuery.Event, slickInstance: SlickInstance) => void;
    reInit: (event: JQuery.Event, slickInstance: SlickInstance) => void;
    destroy: (event: JQuery.Event, slickInstance: SlickInstance) => void;
    setPosition: (event: JQuery.Event, slickInstance: SlickInstance) => void;
    afterChange: (event: JQuery.Event, slickInstance: SlickInstance) => void;
    beforeChange: (event: JQuery.Event, slickInstance: SlickInstance, currentSlide: number, nextSlide: number) => void;
    breakpoint: (event: JQuery.Event, slickInstance: SlickInstance, breakpoint: SlickBreakpoint) => void;
    edge: (event: JQuery.Event, slickInstance: SlickInstance, direction: SlickDirection) => void;
    swipe: (event: JQuery.Event, slickInstance: SlickInstance, direction: SlickDirection) => void;
    lazyLoaded: (event: JQuery.Event, slickInstance: SlickInstance, image: JQuery<HTMLImageElement>, imageSource: string) => void;
    lazyLoadError: (event: JQuery.Event, slickInstance: SlickInstance, image: JQuery<HTMLImageElement>, imageSource: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly accessibility: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly adaptiveHeight: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly autoplay: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly autoplaySpeed: {
        readonly type: import("vue").PropType<number>;
        readonly default: 3000;
    };
    readonly arrows: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly asNavFor: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: null;
    };
    readonly prevArrow: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: "<button type=\"button\" class=\"slick-prev\">Previous</button>";
    };
    readonly nextArrow: {
        readonly type: import("vue").PropType<string | Element | JQuery<HTMLElement>>;
        readonly default: "<button type=\"button\" class=\"slick-next\">Next</button>";
    };
    readonly centerMode: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly centerPadding: {
        readonly type: import("vue").PropType<string>;
        readonly default: "50px";
        readonly validator: (val: string) => boolean;
    };
    readonly cssEase: {
        readonly type: import("vue").PropType<string>;
        readonly default: "ease";
    };
    readonly customPaging: {
        readonly type: import("vue").PropType<(slider: any, i: number) => string>;
        readonly default: () => undefined;
    };
    readonly dots: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly dotsClass: {
        readonly type: import("vue").PropType<string>;
        readonly default: "slick-dots";
    };
    readonly draggable: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly fade: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly focusOnSelect: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly easing: {
        readonly type: import("vue").PropType<string>;
        readonly default: "linear";
    };
    readonly edgeFriction: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0.15;
    };
    readonly infinite: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly initialSlide: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0;
    };
    readonly lazyLoad: {
        readonly type: import("vue").PropType<string>;
        readonly default: "ondemand";
        readonly validator: (val: string) => boolean;
    };
    readonly mobileFirst: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly pauseOnFocus: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly pauseOnHover: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly pauseOnDotsHover: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly respondTo: {
        readonly type: import("vue").PropType<string>;
        readonly default: "window";
        readonly validator: (val: string) => boolean;
    };
    readonly responsive: {
        readonly type: import("vue").PropType<object>;
        readonly default: null;
    };
    readonly rows: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slide: {
        readonly type: import("vue").PropType<string | JQuery<HTMLElement>>;
        readonly default: "";
    };
    readonly slidesPerRow: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slidesToShow: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly slidesToScroll: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1;
    };
    readonly speed: {
        readonly type: import("vue").PropType<number>;
        readonly default: 300;
    };
    readonly swipe: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly swipeToSlide: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly touchMove: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly touchThreshold: {
        readonly type: import("vue").PropType<number>;
        readonly default: 5;
    };
    readonly useCSS: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly useTransform: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly variableWidth: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly vertical: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly verticalSwiping: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly rtl: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: false;
    };
    readonly waitForAnimate: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly default: 1000;
    };
}>> & {
    onInit?: ((event: JQuery.Event, slickInstance: SlickInstance) => any) | undefined;
    onReInit?: ((event: JQuery.Event, slickInstance: SlickInstance) => any) | undefined;
    onDestroy?: ((event: JQuery.Event, slickInstance: SlickInstance) => any) | undefined;
    onSetPosition?: ((event: JQuery.Event, slickInstance: SlickInstance) => any) | undefined;
    onAfterChange?: ((event: JQuery.Event, slickInstance: SlickInstance) => any) | undefined;
    onBeforeChange?: ((event: JQuery.Event, slickInstance: SlickInstance, currentSlide: number, nextSlide: number) => any) | undefined;
    onBreakpoint?: ((event: JQuery.Event, slickInstance: SlickInstance, breakpoint: SlickBreakpoint) => any) | undefined;
    onEdge?: ((event: JQuery.Event, slickInstance: SlickInstance, direction: SlickDirection) => any) | undefined;
    onSwipe?: ((event: JQuery.Event, slickInstance: SlickInstance, direction: SlickDirection) => any) | undefined;
    onLazyLoaded?: ((event: JQuery.Event, slickInstance: SlickInstance, image: JQuery<HTMLImageElement>, imageSource: string) => any) | undefined;
    onLazyLoadError?: ((event: JQuery.Event, slickInstance: SlickInstance, image: JQuery<HTMLImageElement>, imageSource: string) => any) | undefined;
}, {
    readonly swipe: boolean;
    readonly accessibility: boolean;
    readonly adaptiveHeight: boolean;
    readonly autoplay: boolean;
    readonly autoplaySpeed: number;
    readonly arrows: boolean;
    readonly asNavFor: string | Element | JQuery<HTMLElement>;
    readonly prevArrow: string | Element | JQuery<HTMLElement>;
    readonly nextArrow: string | Element | JQuery<HTMLElement>;
    readonly centerMode: boolean;
    readonly centerPadding: string;
    readonly cssEase: string;
    readonly customPaging: (slider: any, i: number) => string;
    readonly dots: boolean;
    readonly dotsClass: string;
    readonly draggable: boolean;
    readonly fade: boolean;
    readonly focusOnSelect: boolean;
    readonly easing: string;
    readonly edgeFriction: number;
    readonly infinite: boolean;
    readonly initialSlide: number;
    readonly lazyLoad: string;
    readonly mobileFirst: boolean;
    readonly pauseOnFocus: boolean;
    readonly pauseOnHover: boolean;
    readonly pauseOnDotsHover: boolean;
    readonly respondTo: string;
    readonly responsive: object;
    readonly rows: number;
    readonly slide: string | JQuery<HTMLElement>;
    readonly slidesPerRow: number;
    readonly slidesToShow: number;
    readonly slidesToScroll: number;
    readonly speed: number;
    readonly swipeToSlide: boolean;
    readonly touchMove: boolean;
    readonly touchThreshold: number;
    readonly useCSS: boolean;
    readonly useTransform: boolean;
    readonly variableWidth: boolean;
    readonly vertical: boolean;
    readonly verticalSwiping: boolean;
    readonly rtl: boolean;
    readonly waitForAnimate: boolean;
    readonly zIndex: number;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
